// Code generated by MockGen. DO NOT EDIT.
// Source: dbhandler.go
//
// Generated by this command:
//
//      mockgen -source=dbhandler.go
//

// Package mock_dbhandler is a generated GoMock package.
package mock_dbhandler

import (
        reflect "reflect"

        models "github.com/sef-comp/Hangover/events/models"
        gomock "go.uber.org/mock/gomock"
)

// MockEventDB is a mock of EventDB interface.
type MockEventDB struct {
        ctrl     *gomock.Controller
        recorder *MockEventDBMockRecorder
        isgomock struct{}
}

// MockEventDBMockRecorder is the mock recorder for MockEventDB.
type MockEventDBMockRecorder struct {
        mock *MockEventDB
}

// NewMockEventDB creates a new mock instance.
func NewMockEventDB(ctrl *gomock.Controller) *MockEventDB {
        mock := &MockEventDB{ctrl: ctrl}
        mock.recorder = &MockEventDBMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventDB) EXPECT() *MockEventDBMockRecorder {
        return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventDB) CreateEvent(arg0 *models.Event) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateEvent", arg0)
        ret0, _ := ret[0].(error)
        return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventDBMockRecorder) CreateEvent(arg0 any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventDB)(nil).CreateEvent), arg0)
}

// DeleteEventByID mocks base method.
func (m *MockEventDB) DeleteEventByID(arg0 string) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteEventByID", arg0)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteEventByID indicates an expected call of DeleteEventByID.
func (mr *MockEventDBMockRecorder) DeleteEventByID(arg0 any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventByID", reflect.TypeOf((*MockEventDB)(nil).DeleteEventByID), arg0)
}

// GetAllEvents mocks base method.
func (m *MockEventDB) GetAllEvents() ([]*models.Event, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetAllEvents")
        ret0, _ := ret[0].([]*models.Event)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetAllEvents indicates an expected call of GetAllEvents.
func (mr *MockEventDBMockRecorder) GetAllEvents() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvents", reflect.TypeOf((*MockEventDB)(nil).GetAllEvents))
}

// GetEventsWithParams mocks base method.
func (m *MockEventDB) GetEventsWithParams(params map[string]any) ([]*models.Event, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetEventsWithParams", params)
        ret0, _ := ret[0].([]*models.Event)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetEventsWithParams indicates an expected call of GetEventsWithParams.
func (mr *MockEventDBMockRecorder) GetEventsWithParams(params any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsWithParams", reflect.TypeOf((*MockEventDB)(nil).GetEventsWithParams), params)
}

