// Code generated by MockGen. DO NOT EDIT.
// Source: dbhandler.go
//
// Generated by this command:
//
//	mockgen -source=dbhandler.go
//

// Package mock_dbhandler is a generated GoMock package.
package mock_dbhandler

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/sef-comp/Hangover/enrollments/models"
	gomock "go.uber.org/mock/gomock"
)

// MockEnrollmentDB is a mock of EnrollmentDB interface.
type MockEnrollmentDB struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentDBMockRecorder
	isgomock struct{}
}

// MockEnrollmentDBMockRecorder is the mock recorder for MockEnrollmentDB.
type MockEnrollmentDBMockRecorder struct {
	mock *MockEnrollmentDB
}

// NewMockEnrollmentDB creates a new mock instance.
func NewMockEnrollmentDB(ctrl *gomock.Controller) *MockEnrollmentDB {
	mock := &MockEnrollmentDB{ctrl: ctrl}
	mock.recorder = &MockEnrollmentDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollmentDB) EXPECT() *MockEnrollmentDBMockRecorder {
	return m.recorder
}

// CancelEnroll mocks base method.
func (m *MockEnrollmentDB) CancelEnroll(enrollment_id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelEnroll", enrollment_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelEnroll indicates an expected call of CancelEnroll.
func (mr *MockEnrollmentDBMockRecorder) CancelEnroll(enrollment_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelEnroll", reflect.TypeOf((*MockEnrollmentDB)(nil).CancelEnroll), enrollment_id)
}

// Enroll mocks base method.
func (m *MockEnrollmentDB) Enroll(user_id, event_id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enroll", user_id, event_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enroll indicates an expected call of Enroll.
func (mr *MockEnrollmentDBMockRecorder) Enroll(user_id, event_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enroll", reflect.TypeOf((*MockEnrollmentDB)(nil).Enroll), user_id, event_id)
}

// GetAllEnrollments mocks base method.
func (m *MockEnrollmentDB) GetAllEnrollments() ([]*models.Enrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEnrollments")
	ret0, _ := ret[0].([]*models.Enrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEnrollments indicates an expected call of GetAllEnrollments.
func (mr *MockEnrollmentDBMockRecorder) GetAllEnrollments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEnrollments", reflect.TypeOf((*MockEnrollmentDB)(nil).GetAllEnrollments))
}

// GetEnrollmentsByEvent mocks base method.
func (m *MockEnrollmentDB) GetEnrollmentsByEvent(event_id uuid.UUID) ([]*models.Enrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollmentsByEvent", event_id)
	ret0, _ := ret[0].([]*models.Enrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollmentsByEvent indicates an expected call of GetEnrollmentsByEvent.
func (mr *MockEnrollmentDBMockRecorder) GetEnrollmentsByEvent(event_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentsByEvent", reflect.TypeOf((*MockEnrollmentDB)(nil).GetEnrollmentsByEvent), event_id)
}

// GetEnrollmentsByUser mocks base method.
func (m *MockEnrollmentDB) GetEnrollmentsByUser(user_id uuid.UUID) ([]*models.Enrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollmentsByUser", user_id)
	ret0, _ := ret[0].([]*models.Enrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollmentsByUser indicates an expected call of GetEnrollmentsByUser.
func (mr *MockEnrollmentDBMockRecorder) GetEnrollmentsByUser(user_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentsByUser", reflect.TypeOf((*MockEnrollmentDB)(nil).GetEnrollmentsByUser), user_id)
}
